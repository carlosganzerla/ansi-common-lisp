;; Exercise 1
(defpackage :chapter-8
  (:use :cl :ring :file))

(in-package :chapter-8)

(eql 'abc 'abc)
(eql 'abc 'my-package:abc)
(my-package:abc)

;; Answer to question: two symbols may have the same name if they are qualified
;; by different packages.

;; Exercise 2
;; "foo" -> 8 bytes (pointer to vector)
;; symbol foo -> 8 bytes (name) + 8 bytes (value, pointer to dword) + 
;; 16 bytes + (pointer to package symbol and function) + plist (considering
;; that all allocation of the plist belogs to symbol, we have 16 bytes per entry
;; + 8 bytes of the pointer, so:
;; "foo": 8 bytes
;; 'foo: 40 + 16n bytes


;; Exercise 3
;; If I got correctly the symbol could evaluate to something else which would
;; mess up everything. But better than using strings is to use :keywords, so
;; IDK what the fuck are you talking about Paul

;; Exercise 4
(file-subst)
(file-util)
(ring-func)

;; Exercise 5
;; Can't copy here, so follows explanation:
;; Read the original using read-text, and read the quote using read-text.
;; Check if each key of the read quote exists on the original text, if it does
;; it's generated by Henly

;; Exercise 6
;; Read using read-text;
;; When generating text, store stuff on a buffer before a punctuation (use punc)
;; After the punctuation is reached, add the word on the middle of the buffer,
;; and flush it. When reach eof, flush the buffer anyway. Consider eof as a
;; punc at your leisure.

